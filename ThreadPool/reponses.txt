3.2 Architecture du programme
Identifiez la partie de la methode Client.paintComponent() qui utilise le future et expliquez son fonctionnement.

if (blocks[i].isDone()){
	blocks[i].get().draw(g, colorMap);
	nbDone++;
}

Une tâche correspond au calcul d'un carré de pixel de l'ensemble de Mandelbrot. Ce calcul est envoyé au serveur, et récupéré dans un objet Future<Block> par le client. Comme indiqué dans la Javadoc, on attend que la tâche soit terminée avec isDone() avant d'appeler get(), car la méthode get() attend que le calcul soit terminé (bloquage du thread). Ensuite, on utilise l'objet Block que nous a renvoyé le serveur pour qu'il dessine les pixels que le serveur lui a calculé.

4.1 Utilisation d’un thread pool

Nombre de thread		Temps (s)
1						52.84
2						27.56
3						20.51
4						18.76
5						17.84
6						17.84
7						17.24
8						17.42
9						17.42	
10						17.17
20						16.67
40						16.01

Calcul avec un CPU i5 4200U - 2 cores - 4 threads - 1.60 GHz to 2.60 GHz frequency

Les points appartenant à l'ensemble sont plus longs à calculer. C'est parce qu'on applique la fonction 100000 fois avant d'estimer qu'un point appartient à l'ensemble. En réalité, les cercles noirs sont rapides à calculer grâce à l'heuristique du programme (isMainCardioid(), isMainCircle()), mais ce sont ceux en bordure du cercle qui demandent plus de temps, comme peu le témoigner la complexité et la couleur des motifs. En périphérie du cardioid, un point peu appartennir à l'ensemble alors que ce ne sera pas forcément le cas pour un autre point juste à côté, la divergence est chaotique, et il faut plusieurs itérations pour se faire une idée sur l'appartenance d'un point à l'ensemble.
Pour résumer, il faut moins de temps pour calculer que les points loin du main cardioid ou du cercle appartiennent à l'ensemble (divergence rapide), et il faut plus de temps pour ceux en périphérie de ces éléments (divergence plus lente). 

La loi d'Amdahl explique bien l'évolution du temps de calcul en fonction du nombre de thread.
Seulement une partie du calcul est parallélisable. Ici, le calcul de bloc de pixel de Mandelbrot est clairement parallélisable. En revanche, la création des tâches par le client est séquentielle. L'affichage graphique a sans doute aussi des procédures séquentielles. Une fois atteins un certain nombre de thread, on n'augmentera plus vraiment la vitesse d'exécution du programme. L'autre raison est la limitation du hardware. Moins la machine a de cœur, moins elle sera optimisée pour travailler en parallèle. Si la machine ne peut gérer que deux thread, alors elle n'ira jamais que deux fois plus vite dans le meilleur des cas. Et même si c'est le cas, gérer les thread prend un temps qui n'est de toute façon pas parallélisable.

C'est intéressant de remarquer que mon CPU a 4 thread, hors le speedup est de 52.84 / 16.01 = 3.30. Dans le meilleur des cas, on espère un temps d'exécution divisé par 4 avec 4 threads. On remarque que ce n'est pas le cas. 3.30 < 4.
